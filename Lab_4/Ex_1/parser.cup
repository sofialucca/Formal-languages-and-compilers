import java_cup.runtime.*;
import java.io.*;

parser code {:
    public static int facts = 0;
    public static int interr = 0;
    public static int errors = 0;
    /* To run the program type: java parser test.txt */
    public static void main(String argv[]){
	try {
        /* Scanner instantiation */
        scanner l = new scanner(new FileReader(argv[0]));
        /* Parser instantiation */
        parser p = new parser(l);
        /* Run the parser */
        Object result = p.parse().value;      
      } catch (NullPointerException e){
              System.err.println("Syntax error, null pointer");
      } catch (FileNotFoundException e){
              System.err.println("Errore opening file " + argv[0]);
      } catch (Exception e){
              e.printStackTrace();
      }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.print(": "+message);
        else System.err.print(": "+message);
    }

    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    /* It returns the object of type Symbol in the top of the parser stack.
    */
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }
:};



// Terminal tokens
terminal RO,RC,C,P,PD,QD;
terminal VARIABLE,ATOM;



// Non terminal tokens
non terminal logic;
non terminal fact, rule,predicatesList,interrogation, argument, argumentsList;
non terminal predicate,elementsFile,listElements;

//Precedence



//////////////////////////////////////
// Grammar start
//////////////////////////////////////



start with logic;


logic ::= listElements {:
    if(parser.facts == 0 || parser.errors == 1){
        return null;
        //System.out.println("Failure termination: File not correct\n");
    }else
        System.out.println("Correct grammar\n");:};


fact ::= predicate P
    {:parser.facts = 1;:}
    |error P {:
    parser.errors = 1;
    parser.report_error("Error in fact\n", parser.getToken());:};

rule ::= predicate PD predicatesList P 
    |error PD predicatesList P
    {:
        parser.errors = 1;
        parser.report_error("Error in rule\n", parser.getToken());
    :};

interrogation ::= QD predicatesList P
    {:if(interr == 1){
        System.err.println("You must have only one interrogation");
        parser.report_error("Error in interrogation\n", parser.getToken());
        parser.errors = 1;
    }else{
        interr++;
    }:}
    | QD error P
    {:
        parser.errors = 1;
        parser.report_error("Error in interrogation\n", parser.getToken());
    :};

predicatesList ::= predicate | predicatesList C predicate ;

argument ::= predicate | VARIABLE;
argumentsList ::= argument | argumentsList C argument;
predicate ::= ATOM RO argumentsList RC | ATOM;

elementsFile ::= interrogation | rule | fact;
listElements ::=  | listElements elementsFile ;



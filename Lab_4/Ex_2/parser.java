
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\004\000\002\014" +
    "\004\000\002\014\002\000\002\015\005\000\002\015\005" +
    "\000\002\020\003\000\002\020\003\000\002\016\003\000" +
    "\002\016\005\000\002\017\004\000\002\021\002\000\002" +
    "\021\006\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\006\000" +
    "\002\004\004\000\002\004\005\000\002\007\004\000\002" +
    "\007\006\000\002\007\006\000\002\007\006\000\002\010" +
    "\005\000\002\010\005\000\002\005\007\000\002\005\007" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\006\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\006" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\004\000\002\012\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\024\003\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\022\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\015\ufffe\041\ufffe\042\ufffe\001\002\000\022\003\024" +
    "\006\022\007\026\010\020\011\011\015\021\041\015\042" +
    "\016\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\024\002\uffee\003\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\015\uffee\016\uffee\001\002\000\024" +
    "\002\ufff1\003\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\015\ufff1\016\ufff1\001\002\000\006\003\173\013\174" +
    "\001\002\000\006\022\166\035\165\001\002\000\024\002" +
    "\uffef\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\015\uffef\016\uffef\001\002\000\022\002\ufff3\003\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\016\ufff3\001\002" +
    "\000\006\003\ufffb\006\ufffb\001\002\000\006\003\ufffa\006" +
    "\ufffa\001\002\000\024\002\ufff0\003\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\001\002\000" +
    "\006\003\147\013\150\001\002\000\016\003\140\006\022" +
    "\007\026\010\020\011\011\015\021\001\002\000\044\003" +
    "\uffc1\014\uffc1\021\131\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\006\003\117" +
    "\006\115\001\002\000\024\003\031\006\022\007\026\010" +
    "\020\011\011\015\021\017\034\022\033\035\032\001\002" +
    "\000\022\003\uffff\006\uffff\007\uffff\010\uffff\011\uffff\015" +
    "\uffff\041\uffff\042\uffff\001\002\000\006\003\110\006\022" +
    "\001\002\000\020\002\000\003\031\006\022\007\026\010" +
    "\020\011\011\015\021\001\002\000\022\002\ufff4\003\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4\001" +
    "\002\000\010\017\034\022\033\035\032\001\002\000\020" +
    "\003\043\004\037\005\042\006\022\013\035\024\036\040" +
    "\044\001\002\000\024\002\uffeb\003\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb\001\002\000" +
    "\042\003\uffbd\014\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000\020\003\105" +
    "\004\037\005\042\006\022\013\035\024\036\040\044\001" +
    "\002\000\006\004\103\005\102\001\002\000\042\003\uffc9" +
    "\014\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\001\002\000\042\003\uffca\014\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\001\002\000\036\022\101\023\054\024\047\025\053" +
    "\026\057\027\063\030\061\031\052\032\051\033\060\034" +
    "\050\035\055\036\046\037\062\001\002\000\042\003\uffc8" +
    "\014\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\001\002\000\004\017\034\001\002\000" +
    "\020\003\043\004\037\005\042\006\022\013\035\024\036" +
    "\040\044\001\002\000\042\003\uffd6\014\uffd6\022\uffd6\023" +
    "\054\024\047\025\053\026\057\027\063\030\061\031\052" +
    "\032\051\033\060\034\050\035\055\036\uffd6\037\uffd6\001" +
    "\002\000\020\003\043\004\037\005\042\006\022\013\035" +
    "\024\036\040\044\001\002\000\020\003\043\004\037\005" +
    "\042\006\022\013\035\024\036\040\044\001\002\000\020" +
    "\003\uffc2\004\uffc2\005\uffc2\006\uffc2\013\uffc2\024\uffc2\040" +
    "\uffc2\001\002\000\020\003\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\013\uffc4\024\uffc4\040\uffc4\001\002\000\020\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\013\uffc5\024\uffc5\040\uffc5\001\002" +
    "\000\020\003\043\004\037\005\042\006\022\013\035\024" +
    "\036\040\044\001\002\000\020\003\043\004\037\005\042" +
    "\006\022\013\035\024\036\040\044\001\002\000\004\035" +
    "\073\001\002\000\020\003\043\004\037\005\042\006\022" +
    "\013\035\024\036\040\044\001\002\000\020\003\043\004" +
    "\037\005\042\006\022\013\035\024\036\040\044\001\002" +
    "\000\020\003\uffc3\004\uffc3\005\uffc3\006\uffc3\013\uffc3\024" +
    "\uffc3\040\uffc3\001\002\000\020\003\043\004\037\005\042" +
    "\006\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\043\004\037\005\042\006\022\013\035\024\036\040\044" +
    "\001\002\000\020\003\043\004\037\005\042\006\022\013" +
    "\035\024\036\040\044\001\002\000\020\003\043\004\037" +
    "\005\042\006\022\013\035\024\036\040\044\001\002\000" +
    "\042\003\uffd2\014\uffd2\022\uffd2\023\054\024\047\025\053" +
    "\026\057\027\063\030\061\031\052\032\051\033\060\034" +
    "\050\035\055\036\046\037\062\001\002\000\042\003\uffd4" +
    "\014\uffd4\022\uffd4\023\054\024\047\025\053\026\057\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\001\002\000\042\003\uffd7\014\uffd7\022" +
    "\uffd7\023\054\024\047\025\053\026\057\027\063\030\061" +
    "\031\052\032\051\033\060\034\050\035\055\036\046\037" +
    "\uffd7\001\002\000\042\003\uffd3\014\uffd3\022\uffd3\023\054" +
    "\024\047\025\053\026\057\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002" +
    "\000\042\003\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002\000\042\003" +
    "\uffd1\014\uffd1\022\uffd1\023\054\024\047\025\053\026\057" +
    "\027\063\030\061\031\052\032\051\033\060\034\050\035" +
    "\055\036\046\037\062\001\002\000\020\003\043\004\037" +
    "\005\042\006\022\013\035\024\036\040\044\001\002\000" +
    "\042\003\uffd5\014\uffd5\022\uffd5\023\054\024\047\025\053" +
    "\026\057\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\042\003\uffd0" +
    "\014\uffd0\022\uffd0\023\uffd0\024\uffd0\025\053\026\057\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\001\002\000\042\003\uffce\014\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\001\002\000\042\003\uffcf\014\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\053\026\057\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002" +
    "\000\042\003\uffd8\014\uffd8\022\uffd8\023\054\024\047\025" +
    "\053\026\057\027\063\030\061\031\052\032\051\033\060" +
    "\034\050\035\055\036\uffd8\037\uffd8\001\002\000\024\002" +
    "\uffe6\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\015\uffe6\016\uffe6\001\002\000\042\003\uffc6\014\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\001\002\000\042\003\uffc7\014\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002" +
    "\000\036\014\107\023\054\024\047\025\053\026\057\027" +
    "\063\030\061\031\052\032\051\033\060\034\050\035\055" +
    "\036\046\037\062\001\002\000\006\014\106\017\034\001" +
    "\002\000\042\003\uffcb\014\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\001\002\000\042" +
    "\003\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\001\002\000\006\017\034\022" +
    "\113\001\002\000\004\022\112\001\002\000\024\002\uffe5" +
    "\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\015" +
    "\uffe5\016\uffe5\001\002\000\024\002\uffe4\003\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\001" +
    "\002\000\022\002\ufff2\003\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\015\ufff2\016\ufff2\001\002\000\010\020\ufff6\021" +
    "\ufff6\022\ufff6\001\002\000\006\020\122\022\123\001\002" +
    "\000\004\022\121\001\002\000\006\020\ufff9\022\ufff9\001" +
    "\002\000\022\003\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\015\ufffc\041\ufffc\042\ufffc\001\002\000\004\006\115\001" +
    "\002\000\022\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\015\ufffd\041\ufffd\042\ufffd\001\002\000\006\020\ufff8\022" +
    "\ufff8\001\002\000\010\020\ufff7\021\126\022\ufff7\001\002" +
    "\000\004\004\127\001\002\000\004\017\130\001\002\000" +
    "\010\020\ufff5\021\ufff5\022\ufff5\001\002\000\010\003\133" +
    "\004\134\006\132\001\002\000\004\017\137\001\002\000" +
    "\004\017\136\001\002\000\004\017\135\001\002\000\042" +
    "\003\uffc0\014\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\001\002\000\042\003\uffbe\014" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\001\002\000\042\003\uffbf\014\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\001\002\000\026\003\031\006\022\007\026\010\020\011" +
    "\011\015\021\016\145\017\034\022\033\035\032\001\002" +
    "\000\020\003\143\006\022\007\026\010\020\011\011\015" +
    "\021\016\142\001\002\000\024\002\uffed\003\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016\uffed\001" +
    "\002\000\012\016\144\017\034\022\033\035\032\001\002" +
    "\000\024\002\uffec\003\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\015\uffec\016\uffec\001\002\000\024\002\uffea" +
    "\003\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015" +
    "\uffea\016\uffea\001\002\000\016\003\031\006\022\007\026" +
    "\010\020\011\011\015\021\001\002\000\020\003\043\004" +
    "\037\005\042\006\022\013\035\024\036\040\044\001\002" +
    "\000\020\003\152\004\037\005\042\006\022\013\035\024" +
    "\036\040\044\001\002\000\040\003\155\014\154\023\054" +
    "\024\047\025\053\026\057\027\063\030\061\031\052\032" +
    "\051\033\060\034\050\035\055\036\046\037\062\001\002" +
    "\000\006\014\153\017\034\001\002\000\016\003\uffdf\006" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\015\uffdf\001\002\000\016" +
    "\003\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\015\uffe1\001" +
    "\002\000\016\003\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\015\uffde\001\002\000\036\014\157\023\054\024\047\025" +
    "\053\026\057\027\063\030\061\031\052\032\051\033\060" +
    "\034\050\035\055\036\046\037\062\001\002\000\016\003" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\015\uffe0\001\002" +
    "\000\006\003\162\012\161\001\002\000\016\003\031\006" +
    "\022\007\026\010\020\011\011\015\021\001\002\000\016" +
    "\003\031\006\022\007\026\010\020\011\011\015\021\001" +
    "\002\000\024\002\uffe2\003\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\015\uffe2\016\uffe2\001\002\000\024\002" +
    "\uffe3\003\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\015\uffe3\016\uffe3\001\002\000\020\003\170\004\037\005" +
    "\042\006\022\013\035\024\036\040\044\001\002\000\024" +
    "\002\uffe9\003\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\015\uffe9\016\uffe9\001\002\000\036\022\172\023\054" +
    "\024\047\025\053\026\057\027\063\030\061\031\052\032" +
    "\051\033\060\034\050\035\055\036\046\037\062\001\002" +
    "\000\006\017\034\022\171\001\002\000\024\002\uffe7\003" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7" +
    "\016\uffe7\001\002\000\024\002\uffe8\003\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\001\002" +
    "\000\020\003\043\004\037\005\042\006\022\013\035\024" +
    "\036\040\044\001\002\000\020\003\200\004\037\005\042" +
    "\006\022\013\035\024\036\040\044\001\002\000\016\003" +
    "\031\006\022\007\026\010\020\011\011\015\021\001\002" +
    "\000\024\002\uffdd\003\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\015\uffdd\016\uffdd\001\002\000\040\003\203" +
    "\014\202\023\054\024\047\025\053\026\057\027\063\030" +
    "\061\031\052\032\051\033\060\034\050\035\055\036\046" +
    "\037\062\001\002\000\006\014\201\017\034\001\002\000" +
    "\016\003\uffda\006\uffda\007\uffda\010\uffda\011\uffda\015\uffda" +
    "\001\002\000\016\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\015\uffdc\001\002\000\016\003\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\015\uffd9\001\002\000\036\014\205\023" +
    "\054\024\047\025\053\026\057\027\063\030\061\031\052" +
    "\032\051\033\060\034\050\035\055\036\046\037\062\001" +
    "\002\000\016\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\015\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\004\014\003\001\001\000\024\003" +
    "\026\004\013\005\007\006\016\007\012\010\006\015\024" +
    "\020\022\024\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\145\001\001\000\020\003\140\004\013\005" +
    "\007\006\016\007\012\010\006\024\011\001\001\000\002" +
    "\001\001\000\006\016\115\017\117\001\001\000\016\004" +
    "\113\005\007\006\016\007\012\010\006\024\011\001\001" +
    "\000\002\001\001\000\004\024\110\001\001\000\016\004" +
    "\027\005\007\006\016\007\012\010\006\024\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\040\024" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\103\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\063\013\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\044\024" +
    "\037\001\001\000\006\012\063\013\055\001\001\000\006" +
    "\011\077\024\037\001\001\000\006\011\076\024\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\075\024\037\001\001\000\006\011\074\024" +
    "\037\001\001\000\002\001\001\000\006\011\071\024\037" +
    "\001\001\000\006\011\070\024\037\001\001\000\002\001" +
    "\001\000\006\011\067\024\037\001\001\000\006\011\066" +
    "\024\037\001\001\000\006\011\065\024\037\001\001\000" +
    "\006\011\064\024\037\001\001\000\006\012\063\013\055" +
    "\001\001\000\006\012\063\013\055\001\001\000\006\012" +
    "\063\013\055\001\001\000\006\012\063\013\055\001\001" +
    "\000\006\012\063\013\055\001\001\000\006\012\063\013" +
    "\055\001\001\000\006\011\073\024\037\001\001\000\006" +
    "\012\063\013\055\001\001\000\006\012\063\013\055\001" +
    "\001\000\006\012\063\013\055\001\001\000\006\012\063" +
    "\013\055\001\001\000\006\012\063\013\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\063\013\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\113\005\007\006\016\007\012\010\006" +
    "\024\011\001\001\000\016\004\027\005\007\006\016\007" +
    "\012\010\006\024\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\157\005\007\006\016\007\012\010\006\024\011\001\001" +
    "\000\006\011\155\024\037\001\001\000\006\011\150\024" +
    "\037\001\001\000\006\012\063\013\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\063\013\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\163\005\007\006\016\007" +
    "\012\010\006\024\011\001\001\000\016\004\162\005\007" +
    "\006\016\007\012\010\006\024\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\166\024\037\001\001" +
    "\000\002\001\001\000\006\012\063\013\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\203\024\037\001\001\000\006\011\176\024\037\001" +
    "\001\000\016\004\175\005\007\006\016\007\012\010\006" +
    "\024\011\001\001\000\002\001\001\000\006\012\063\013" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\063\013\055\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static int errors = 0;
    /* To run the program type: java parser test.txt */
    public static void main(String argv[]){
	try {
        /* Scanner instantiation */
        scanner l = new scanner(new FileReader(argv[0]));
        /* Parser instantiation */
        parser p = new parser(l);
        /* Run the parser */
        Object result = p.parse().value;      
      } catch (Exception e){
              e.printStackTrace();
      }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    /* It returns the object of type Symbol in the top of the parser stack.
    */
        // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private void pSynError(String message){
        System.err.println("Syntax error: line: " + parser.getLine() + " column: " + parser.getColumn()+ "\n Error type: " + message);
        parser.errors = 1;
        parser.done_parsing();
    }

    private void pSynWarning(String message){
        System.err.println("Syntax error: line: " + parser.getLine() + " column: " + parser.getColumn() + "\n Error type: " + message);
        parser.errors = 1;        
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_list stmt_list 
            {
              Object RESULT =null;
		     
    if(parser.errors == 1){
        return null;
    }else
        System.out.println("Correct grammar\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= type var_list S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= type error S 
            {
              Object RESULT =null;
		 pSynWarning("Declaration error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= DOUBLE_TYPE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_list ::= var_list CM var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var ::= ID array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array ::= array SO INT SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_list ::= error stmt 
            {
              Object RESULT =null;
		pSynWarning("Error in statment");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= BO stmt_list BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= BO stmt_list error BC 
            {
              Object RESULT =null;
		 pSynWarning("Error in statement, missing ; before }");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= error S 
            {
              Object RESULT =null;
		pSynWarning("Error in stament");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= BO error BC 
            {
              Object RESULT =null;
		pSynWarning("Error in statement, missing ; before }\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment ::= id S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= id EQ exp S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment ::= id EQ error S 
            {
              Object RESULT =null;
		pSynWarning("Error in assignment, type 1");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment ::= error EQ exp S 
            {
              Object RESULT =null;
		pSynWarning("Error in assigment, type 2");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // print ::= PRINT id S 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT error S 
            {
              Object RESULT =null;
		pSynWarning("Error in print instrcution, missing '{'");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF if_condition stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF if_condition stmt error stmt 
            {
              Object RESULT =null;
		pSynWarning("Error in if declaration, missing else\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_condition ::= RO exp RC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_condition ::= error exp RC 
            {
              Object RESULT =null;
		pSynWarning("if error, missing '('\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_condition ::= RO error RC 
            {
              Object RESULT =null;
		pSynWarning("Condition if error\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_condition ::= RO exp error 
            {
              Object RESULT =null;
		pSynWarning("if error, missing ')'\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while ::= WHILE while_condition stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while_condition ::= RO exp RC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_condition ::= error exp RC 
            {
              Object RESULT =null;
		pSynWarning("While error, missing '('\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_condition ::= RO error RC 
            {
              Object RESULT =null;
		pSynWarning("Condition While error\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // while_condition ::= RO exp error 
            {
              Object RESULT =null;
		pSynWarning("While error, missing ')'\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp AND exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp OR exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= NOT exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp EQ EQ exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MIN exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MAJ exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp mineq exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp mageq exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp PLUS exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MINUS exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp STAR exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp DIV exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= RO exp RC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= RO error RC 
            {
              Object RESULT =null;
		pSynWarning("Expressione error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= MINUS INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= MINUS DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mineq ::= MIN_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mineq ::= EQ_MIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mageq ::= MAJ_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mageq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mageq ::= EQ_MAJ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mageq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // id ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // id ::= ID SO INT SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id ::= ID SO ID SC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // id ::= ID SO error SC 
            {
              Object RESULT =null;
		pSynWarning("Vector error, missing '['");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id ::= error SC 
            {
              Object RESULT =null;
		pSynWarning("Error in vector");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

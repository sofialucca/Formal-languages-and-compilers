
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\004\007\000\002\004\011" +
    "\000\002\005\003\000\002\005\005\000\002\017\004\000" +
    "\002\006\005\000\002\007\003\000\002\007\004\000\002" +
    "\010\004\000\002\011\004\000\002\012\003\000\002\012" +
    "\005\000\002\013\006\000\002\014\003\000\002\014\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\004\012\004\001\002\000\004\010\051\001" +
    "\002\000\004\012\036\001\002\000\006\004\ufff7\012\ufff7" +
    "\001\002\000\004\013\017\001\002\000\004\002\014\001" +
    "\002\000\006\004\012\012\004\001\002\000\004\012\ufff5" +
    "\001\002\000\006\004\ufff6\012\ufff6\001\002\000\004\002" +
    "\001\001\002\000\006\005\033\007\032\001\002\000\006" +
    "\005\ufffb\007\ufffb\001\002\000\004\006\020\001\002\000" +
    "\004\012\021\001\002\000\004\006\022\001\002\000\004" +
    "\015\023\001\002\000\010\005\ufffd\006\024\007\ufffd\001" +
    "\002\000\004\017\025\001\002\000\004\016\027\001\002" +
    "\000\006\005\ufffc\007\ufffc\001\002\000\004\015\030\001" +
    "\002\000\010\005\ufffe\007\ufffe\020\031\001\002\000\006" +
    "\005\uffff\007\uffff\001\002\000\004\013\017\001\002\000" +
    "\006\004\ufff8\012\ufff8\001\002\000\006\005\ufffa\007\ufffa" +
    "\001\002\000\006\002\000\012\036\001\002\000\004\006" +
    "\040\001\002\000\006\002\ufff0\012\ufff0\001\002\000\004" +
    "\011\043\001\002\000\006\005\046\007\045\001\002\000" +
    "\006\005\ufff3\007\ufff3\001\002\000\004\013\044\001\002" +
    "\000\006\005\ufff4\007\ufff4\001\002\000\004\011\043\001" +
    "\002\000\006\002\ufff1\012\ufff1\001\002\000\006\005\ufff2" +
    "\007\ufff2\001\002\000\006\002\uffef\012\uffef\001\002\000" +
    "\004\013\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\014\002\007\006\005\007\010\010\004\017" +
    "\006\001\001\000\002\001\001\000\006\013\036\014\034" +
    "\001\001\000\002\001\001\000\006\004\015\005\014\001" +
    "\001\000\002\001\001\000\006\006\012\017\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\041\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= lang EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // lang ::= firstPart secondPart 
            { parser.Tree.reduce(2,"lang",0);
              Object RESULT =null;
		System.out.println("Correct grammar");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lang",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // collocation ::= LITT GEN NUM LETT 
            { parser.Tree.reduce(4,"collocation",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collocation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // collocation ::= LITT GEN NUM 
            { parser.Tree.reduce(3,"collocation",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("collocation",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // book ::= ISBN COL STRING COL NUM 
            { parser.Tree.reduce(5,"book",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("book",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // book ::= ISBN COL STRING COL NUM COL collocation 
            { parser.Tree.reduce(7,"book",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("book",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // booksList ::= book 
            { parser.Tree.reduce(1,"booksList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booksList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // booksList ::= booksList C book 
            { parser.Tree.reduce(3,"booksList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booksList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // writer ::= STRING ARR 
            { parser.Tree.reduce(2,"writer",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writer",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listElement ::= writer booksList SC 
            { parser.Tree.reduce(3,"listElement",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listElement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // writersList ::= listElement 
            { parser.Tree.reduce(1,"writersList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writersList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // writersList ::= writersList listElement 
            { parser.Tree.reduce(2,"writersList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("writersList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // firstPart ::= writersList SEP 
            { parser.Tree.reduce(2,"firstPart",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("firstPart",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // loan ::= DATE ISBN 
            { parser.Tree.reduce(2,"loan",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loan",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // loansList ::= loan 
            { parser.Tree.reduce(1,"loansList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loansList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // loansList ::= loansList C loan 
            { parser.Tree.reduce(3,"loansList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loansList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // userElement ::= STRING COL loansList SC 
            { parser.Tree.reduce(4,"userElement",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("userElement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // secondPart ::= userElement 
            { parser.Tree.reduce(1,"secondPart",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secondPart",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // secondPart ::= secondPart userElement 
            { parser.Tree.reduce(2,"secondPart",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("secondPart",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\006\000\002\005\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\004\000" +
    "\002\007\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\006\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\004\000" +
    "\002\014\003\000\002\015\003\000\002\015\005\000\002" +
    "\016\006\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\017\004\000\002\020\003\000" +
    "\002\020\003\000\002\021\007\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\005\000\002\024" +
    "\004\000\002\024\005\000\002\025\007\000\002\025\010" +
    "\000\002\025\006\000\002\026\004\000\002\027\004\000" +
    "\002\027\007\000\002\027\005\000\002\030\003\000\002" +
    "\030\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\033\003\000\002\033\004\000\002\032\010" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\016\006\020\007\025\010\016\011\010\042" +
    "\026\043\006\001\002\000\024\002\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\013\uffdb\017\uffdb\042\uffdb\043\uffdb\001" +
    "\002\000\022\002\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\017\uffcd\042\uffcd\043\uffcd\001\002\000\004\006\030\001" +
    "\002\000\024\002\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\013\136\017\uffcf\042\uffcf\043\uffcf\001\002\000\004\014" +
    "\072\001\002\000\024\002\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\017\uffdc\042\uffdc\043\uffdc\001\002\000" +
    "\022\002\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\017\uffcc" +
    "\042\uffcc\043\uffcc\001\002\000\004\002\130\001\002\000" +
    "\042\015\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\001\002\000\020\002\000" +
    "\006\020\007\025\010\016\011\010\042\026\043\006\001" +
    "\002\000\004\014\072\001\002\000\004\036\054\001\002" +
    "\000\044\015\ufff1\022\051\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001\002\000" +
    "\022\002\uffca\006\uffca\007\uffca\010\uffca\011\uffca\017\uffca" +
    "\042\uffca\043\uffca\001\002\000\042\015\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\001\002\000\004\023\050\001\002\000\024\002\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda\017\uffda\042" +
    "\uffda\043\uffda\001\002\000\004\014\041\001\002\000\004" +
    "\006\030\001\002\000\022\002\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\017\uffcb\042\uffcb\043\uffcb\001\002\000\010" +
    "\021\uffff\022\036\023\uffff\001\002\000\006\021\ufffe\023" +
    "\ufffe\001\002\000\006\021\034\023\ufffa\001\002\000\006" +
    "\021\ufffc\023\ufffc\001\002\000\004\006\030\001\002\000" +
    "\006\021\ufffb\023\ufffb\001\002\000\004\004\037\001\002" +
    "\000\004\020\040\001\002\000\044\015\ufffd\021\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\001\002\000\010\004\045\005\043\006\020" +
    "\001\002\000\042\015\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000" +
    "\042\015\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\001\002\000\004\015\046" +
    "\001\002\000\042\015\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\001\002\000" +
    "\004\023\047\001\002\000\024\002\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\013\uffdd\017\uffdd\042\uffdd\043\uffdd\001" +
    "\002\000\024\002\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\013\ufff8\017\ufff8\042\ufff8\043\ufff8\001\002\000\006\004" +
    "\037\006\052\001\002\000\004\020\053\001\002\000\042" +
    "\015\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\041\ufff2\001\002\000\012\004\045\005" +
    "\043\006\020\025\055\001\002\000\010\004\045\005\043" +
    "\006\020\001\002\000\042\015\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\001" +
    "\002\000\042\015\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002\000\014" +
    "\023\062\024\063\025\064\026\061\027\065\001\002\000" +
    "\012\004\ufff5\005\ufff5\006\ufff5\025\ufff5\001\002\000\024" +
    "\002\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\017" +
    "\uffe8\042\uffe8\043\uffe8\001\002\000\012\004\ufff7\005\ufff7" +
    "\006\ufff7\025\ufff7\001\002\000\012\004\ufff6\005\ufff6\006" +
    "\ufff6\025\ufff6\001\002\000\012\004\ufff4\005\ufff4\006\ufff4" +
    "\025\ufff4\001\002\000\012\004\045\005\043\006\020\025" +
    "\055\001\002\000\042\015\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002" +
    "\000\042\015\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\001\002\000\010\015" +
    "\114\037\113\040\115\001\002\000\012\004\045\005\043" +
    "\006\020\025\055\001\002\000\024\002\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\013\uffd3\017\uffd3\042\uffd3\043\uffd3" +
    "\001\002\000\010\015\uffd8\037\uffd8\040\uffd8\001\002\000" +
    "\032\024\063\025\064\026\061\027\065\030\106\031\105" +
    "\032\100\033\077\034\104\035\076\036\102\041\103\001" +
    "\002\000\012\004\uffe2\005\uffe2\006\uffe2\025\uffe2\001\002" +
    "\000\012\004\uffe4\005\uffe4\006\uffe4\025\uffe4\001\002\000" +
    "\012\004\uffe5\005\uffe5\006\uffe5\025\uffe5\001\002\000\012" +
    "\004\045\005\043\006\020\025\055\001\002\000\004\036" +
    "\110\001\002\000\004\036\107\001\002\000\012\004\uffe3" +
    "\005\uffe3\006\uffe3\025\uffe3\001\002\000\012\004\uffe6\005" +
    "\uffe6\006\uffe6\025\uffe6\001\002\000\012\004\uffe7\005\uffe7" +
    "\006\uffe7\025\uffe7\001\002\000\012\004\uffe0\005\uffe0\006" +
    "\uffe0\025\uffe0\001\002\000\012\004\uffe1\005\uffe1\006\uffe1" +
    "\025\uffe1\001\002\000\020\015\uffd9\024\063\025\064\026" +
    "\061\027\065\037\uffd9\040\uffd9\001\002\000\012\004\045" +
    "\005\043\006\020\025\055\001\002\000\012\004\uffdf\005" +
    "\uffdf\006\uffdf\025\uffdf\001\002\000\006\012\116\016\117" +
    "\001\002\000\012\004\uffde\005\uffde\006\uffde\025\uffde\001" +
    "\002\000\014\006\020\007\025\016\124\042\026\043\006" +
    "\001\002\000\016\006\020\007\025\010\016\011\010\042" +
    "\026\043\006\001\002\000\020\006\020\007\025\010\016" +
    "\011\010\017\121\042\026\043\006\001\002\000\024\002" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\017\uffd6" +
    "\042\uffd6\043\uffd6\001\002\000\022\002\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\017\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\024\002\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\017\uffd4\042\uffd4\043\uffd4\001\002\000\016\006\020" +
    "\007\025\010\016\011\010\042\026\043\006\001\002\000" +
    "\020\006\020\007\025\010\016\011\010\017\126\042\026" +
    "\043\006\001\002\000\024\002\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\013\uffd5\017\uffd5\042\uffd5\043\uffd5\001\002" +
    "\000\010\015\uffd7\037\uffd7\040\uffd7\001\002\000\004\002" +
    "\001\001\002\000\010\015\132\037\113\040\115\001\002" +
    "\000\004\016\133\001\002\000\016\006\020\007\025\010" +
    "\016\011\010\042\026\043\006\001\002\000\020\006\020" +
    "\007\025\010\016\011\010\017\135\042\026\043\006\001" +
    "\002\000\022\002\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\017\uffc8\042\uffc8\043\uffc8\001\002\000\006\010\016\012" +
    "\140\001\002\000\022\002\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\017\uffce\042\uffce\043\uffce\001\002\000\014\006" +
    "\020\007\025\016\143\042\026\043\006\001\002\000\022" +
    "\002\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\017\uffd2\042" +
    "\uffd2\043\uffd2\001\002\000\022\002\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\017\uffd0\042\uffd0\043\uffd0\001\002\000" +
    "\016\006\020\007\025\010\016\011\010\042\026\043\006" +
    "\001\002\000\020\006\020\007\025\010\016\011\010\017" +
    "\145\042\026\043\006\001\002\000\022\002\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\011\uffd1\017\uffd1\042\uffd1\043\uffd1\001" +
    "\002\000\006\021\034\023\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\036\002\012\004\013\006\022\007\023\011" +
    "\021\012\016\016\003\021\010\022\004\026\006\030\011" +
    "\031\020\032\026\033\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\032\004\030\005\145\001\001" +
    "\000\004\027\136\001\001\000\004\024\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\013\006\022\007\023\011\021\012" +
    "\016\016\003\021\010\022\004\026\006\030\011\031\121" +
    "\032\026\001\001\000\006\024\070\025\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\032\004\030\005\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\034\004\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\013\011\021\012\041\013\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\013\011\021\012\041\013\056" +
    "\014\055\015\057\001\001\000\012\004\013\011\021\012" +
    "\041\013\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\013\011\021\012\041\013\056\014\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\111" +
    "\001\001\000\020\004\013\011\021\012\041\013\056\014" +
    "\055\015\074\023\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\065\017\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\013" +
    "\011\021\012\041\013\056\014\055\015\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\065\001\001\000\020\004\013\011\021" +
    "\012\041\013\056\014\055\015\074\023\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\013\006\022\007\023\011\021\012\016\016\003\021" +
    "\010\022\122\001\001\000\034\004\013\006\022\007\023" +
    "\011\021\012\016\016\003\021\010\022\004\026\006\030" +
    "\011\031\020\032\026\033\117\001\001\000\032\004\013" +
    "\006\022\007\023\011\021\012\016\016\003\021\010\022" +
    "\004\026\006\030\011\031\121\032\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\013\006\022\007\023\011\021\012\016\016\003\021\010" +
    "\022\004\026\006\030\011\031\020\032\026\033\124\001" +
    "\001\000\032\004\013\006\022\007\023\011\021\012\016" +
    "\016\003\021\010\022\004\026\006\030\011\031\121\032" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\111\001\001\000\002\001\001\000" +
    "\034\004\013\006\022\007\023\011\021\012\016\016\003" +
    "\021\010\022\004\026\006\030\011\031\020\032\026\033" +
    "\133\001\001\000\032\004\013\006\022\007\023\011\021" +
    "\012\016\016\003\021\010\022\004\026\006\030\011\031" +
    "\121\032\026\001\001\000\002\001\001\000\004\026\140" +
    "\001\001\000\002\001\001\000\022\004\013\006\022\007" +
    "\023\011\021\012\016\016\003\021\010\022\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\013\006" +
    "\022\007\023\011\021\012\016\016\003\021\010\022\004" +
    "\026\006\030\011\031\020\032\026\033\143\001\001\000" +
    "\032\004\013\006\022\007\023\011\021\012\016\016\003" +
    "\021\010\022\004\026\006\030\011\031\121\032\026\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= actionsList 
            { parser.Tree.reduce(1,"prog",0);
              Object RESULT =null;
		System.out.println("Found a program");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // varDec ::= ID 
            { parser.Tree.reduce(1,"varDec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // varDec ::= arrayDec 
            { parser.Tree.reduce(1,"varDec",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arrayDec ::= ID SO INT SC 
            { parser.Tree.reduce(4,"arrayDec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varList ::= varDec 
            { parser.Tree.reduce(1,"varList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varList ::= varList CM varDec 
            { parser.Tree.reduce(3,"varList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decList ::= INT_TYPE varList 
            { parser.Tree.reduce(2,"decList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decList ::= DOUBLE_TYPE varList 
            { parser.Tree.reduce(2,"decList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec ::= decList S 
            { parser.Tree.reduce(2,"dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // op ::= PLUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // op ::= MINUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // op ::= STAR 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // op ::= DIV 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arrayUse ::= arrayDec 
            { parser.Tree.reduce(1,"arrayUse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayUse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arrayUse ::= ID SO ID SC 
            { parser.Tree.reduce(4,"arrayUse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayUse",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varUse ::= ID 
            { parser.Tree.reduce(1,"varUse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varUse",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varUse ::= arrayUse 
            { parser.Tree.reduce(1,"varUse",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varUse",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= INT 
            { parser.Tree.reduce(1,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= DOUBLE 
            { parser.Tree.reduce(1,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term ::= varUse 
            { parser.Tree.reduce(1,"term",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // val ::= MINUS term 
            { parser.Tree.reduce(2,"val",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // val ::= term 
            { parser.Tree.reduce(1,"val",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("val",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= val 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr op val 
            { parser.Tree.reduce(3,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // setVal ::= varUse EQ expr S 
            { parser.Tree.reduce(4,"setVal",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("setVal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compOp ::= MIN 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compOp ::= MAJ 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compOp ::= MIN_EQ 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compOp ::= EQ_MIN 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // compOp ::= MAJ_EQ 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // compOp ::= EQ_MAJ 
            { parser.Tree.reduce(1,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compOp ::= EQ EQ 
            { parser.Tree.reduce(2,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compOp ::= NOT EQ 
            { parser.Tree.reduce(2,"compOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compOp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listOp ::= AND 
            { parser.Tree.reduce(1,"listOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listOp ::= OR 
            { parser.Tree.reduce(1,"listOp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // printAction ::= PRINT RO term RC S 
            { parser.Tree.reduce(5,"printAction",0);
              Object RESULT =null;
		System.out.println("Print expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printAction",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // singAction ::= printAction 
            { parser.Tree.reduce(1,"singAction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("singAction",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // singAction ::= setVal 
            { parser.Tree.reduce(1,"singAction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("singAction",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // singAction ::= dec 
            { parser.Tree.reduce(1,"singAction",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("singAction",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= expr compOp expr 
            { parser.Tree.reduce(3,"cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condList ::= RO cond 
            { parser.Tree.reduce(2,"condList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condList ::= condList listOp cond 
            { parser.Tree.reduce(3,"condList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condAndInstructionsIf ::= condList RC BO actionsList BC 
            { parser.Tree.reduce(5,"condAndInstructionsIf",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condAndInstructionsIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condAndInstructionsIf ::= condList RC THEN BO actionsList BC 
            { parser.Tree.reduce(6,"condAndInstructionsIf",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condAndInstructionsIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condAndInstructionsIf ::= condList RC THEN singAction 
            { parser.Tree.reduce(4,"condAndInstructionsIf",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condAndInstructionsIf",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifExpr ::= IF condAndInstructionsIf 
            { parser.Tree.reduce(2,"ifExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // elseExpr ::= ELSE ifExpr 
            { parser.Tree.reduce(2,"elseExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elseExpr ::= ELSE THEN BO actionsList BC 
            { parser.Tree.reduce(5,"elseExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elseExpr ::= ELSE THEN singAction 
            { parser.Tree.reduce(3,"elseExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifElseExpr ::= ifExpr 
            { parser.Tree.reduce(1,"ifElseExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifElseExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ifElseExpr ::= ifExpr elseExpr 
            { parser.Tree.reduce(2,"ifElseExpr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifElseExpr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // actions ::= singAction 
            { parser.Tree.reduce(1,"actions",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // actions ::= ifElseExpr 
            { parser.Tree.reduce(1,"actions",0);
              Object RESULT =null;
		System.out.println("If expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // actions ::= whileExpr 
            { parser.Tree.reduce(1,"actions",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // actionsList ::= actions 
            { parser.Tree.reduce(1,"actionsList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionsList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // actionsList ::= actionsList actions 
            { parser.Tree.reduce(2,"actionsList",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actionsList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // whileExpr ::= WHILE condList RC BO actionsList BC 
            { parser.Tree.reduce(6,"whileExpr",0);
              Object RESULT =null;
		System.out.println("While expression");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileExpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

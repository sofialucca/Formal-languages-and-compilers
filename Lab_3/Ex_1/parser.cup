import java_cup.runtime.*;


parser code {:

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
:};



// Terminal tokens
terminal INT, DOUBLE, ID;
terminal PRINT, IF, WHILE,  THEN, ELSE;
terminal RO, RC, BO, BC, SC, CM, SO, S;
terminal PLUS, MINUS, STAR, DIV;
terminal MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE, END;


// Non terminal tokens
non terminal prog;
non terminal varDec, arrayDec, varList, decList, dec;
non terminal op, arrayUse, varUse, term, val, expr, setVal;
non terminal compOp, listOp, printAction, singAction, cond,condList, condAndInstructionsIf,  ifExpr, elseExpr, ifElseExpr, actions, whileExpr;
non terminal actionsList;


//////////////////////////////////////
// Grammar start
//////////////////////////////////////

start with prog;


prog ::= actionsList
        {:System.out.println("Found a program");:};

varDec ::= ID | arrayDec;
arrayDec ::= ID SO INT SC;
varList ::= varDec | varList CM varDec;
decList ::= INT_TYPE varList | DOUBLE_TYPE varList;
dec ::= decList S;

op ::= PLUS| MINUS| STAR| DIV;
arrayUse ::= arrayDec | ID SO ID SC;
varUse ::= ID | arrayUse;
term ::= INT | DOUBLE | varUse;
val ::= MINUS term | term;
expr ::= val | expr op val;
setVal ::= varUse EQ expr S;

compOp ::= MIN| MAJ| MIN_EQ| EQ_MIN| MAJ_EQ| EQ_MAJ| EQ EQ |NOT EQ;
listOp ::= AND | OR;
printAction ::= PRINT RO term RC S
                {:System.out.println("Print expression");:};
singAction ::= printAction | setVal | dec;
cond ::= expr compOp expr;
condList ::= RO cond | condList listOp cond;
condAndInstructionsIf ::= condList RC BO actionsList BC | condList RC THEN BO actionsList BC | condList RC THEN singAction;

ifExpr ::= IF condAndInstructionsIf;
elseExpr ::= ELSE ifExpr | ELSE THEN BO actionsList BC | ELSE THEN singAction;
ifElseExpr ::= ifExpr | ifExpr elseExpr;
actions ::= singAction  | ifElseExpr
            {:System.out.println("If expression");:} | whileExpr ;
actionsList ::= actions | actionsList actions;
whileExpr ::= WHILE condList RC BO actionsList BC
                {:System.out.println("While expression");:};






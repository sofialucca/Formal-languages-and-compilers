
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.lang.Math;
import java.lang.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\016" +
    "\004\000\002\016\002\000\002\017\005\000\002\017\005" +
    "\000\002\022\003\000\002\022\003\000\002\020\003\000" +
    "\002\020\006\000\002\026\002\000\002\021\004\000\002" +
    "\023\002\000\002\023\006\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\006\000\002\004\005\000\002\004\004\000\002" +
    "\007\004\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\010\005\000\002\010\005\000\002\005\010" +
    "\000\002\005\005\000\002\005\007\000\002\015\002\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\006\006\000\002\014\002\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\006\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\011\004\000\002\011\005\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\027\003\000\002\027\006\000\002\027\006" +
    "\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\022\003\ufffe\006\ufffe\007\ufffe\010\ufffe\012" +
    "\ufffe\015\ufffe\041\ufffe\042\ufffe\001\002\000\022\003\023" +
    "\006\026\007\020\010\011\012\022\015\021\041\014\042" +
    "\016\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\024\002\ufff0\003\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\001\002\000\024" +
    "\002\uffed\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\015\uffed\016\uffed\001\002\000\006\003\173\013\174" +
    "\001\002\000\006\017\166\035\165\001\002\000\024\002" +
    "\uffee\003\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\015\uffee\016\uffee\001\002\000\006\003\ufffb\012\ufffb\001" +
    "\002\000\022\002\ufff2\003\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\015\ufff2\016\ufff2\001\002\000\006\003\ufffa\012" +
    "\ufffa\001\002\000\024\002\uffef\003\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\001\002\000" +
    "\006\003\146\013\147\001\002\000\016\003\137\006\026" +
    "\007\020\010\011\012\022\015\021\001\002\000\044\003" +
    "\uffbd\014\uffbd\017\uffbd\021\132\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000\024\003\031" +
    "\006\026\007\020\010\011\012\022\015\021\017\033\022" +
    "\034\035\032\001\002\000\006\003\116\012\114\001\002" +
    "\000\022\003\uffff\006\uffff\007\uffff\010\uffff\012\uffff\015" +
    "\uffff\041\uffff\042\uffff\001\002\000\006\003\110\012\022" +
    "\001\002\000\020\002\000\003\031\006\026\007\020\010" +
    "\011\012\022\015\021\001\002\000\022\002\ufff3\003\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\012\ufff3\015\ufff3\016\ufff3\001" +
    "\002\000\010\017\033\022\034\035\032\001\002\000\020" +
    "\003\043\004\037\005\042\012\022\013\035\024\036\040" +
    "\044\001\002\000\024\002\uffe9\003\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\015\uffe9\016\uffe9\001\002\000" +
    "\042\003\uffba\014\uffba\017\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\001\002\000\020\003\105" +
    "\004\037\005\042\012\022\013\035\024\036\040\044\001" +
    "\002\000\006\004\103\005\102\001\002\000\042\003\uffc6" +
    "\014\uffc6\017\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\001\002\000\042\003\uffc7\014\uffc7\017" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\001\002\000\036\017\101\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\042\003\uffc5" +
    "\014\uffc5\017\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\001\002\000\004\022\034\001\002\000" +
    "\020\003\043\004\037\005\042\012\022\013\035\024\036" +
    "\040\044\001\002\000\042\003\uffd2\014\uffd2\017\uffd2\023" +
    "\055\024\046\025\054\026\057\027\063\030\061\031\051" +
    "\032\052\033\060\034\050\035\056\036\uffd2\037\uffd2\001" +
    "\002\000\020\003\043\004\037\005\042\012\022\013\035" +
    "\024\036\040\044\001\002\000\020\003\043\004\037\005" +
    "\042\012\022\013\035\024\036\040\044\001\002\000\020" +
    "\003\uffbe\004\uffbe\005\uffbe\012\uffbe\013\uffbe\024\uffbe\040" +
    "\uffbe\001\002\000\020\003\uffc1\004\uffc1\005\uffc1\012\uffc1" +
    "\013\uffc1\024\uffc1\040\uffc1\001\002\000\020\003\uffc0\004" +
    "\uffc0\005\uffc0\012\uffc0\013\uffc0\024\uffc0\040\uffc0\001\002" +
    "\000\020\003\043\004\037\005\042\012\022\013\035\024" +
    "\036\040\044\001\002\000\020\003\043\004\037\005\042" +
    "\012\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\004\035\072\001\002\000\020\003\043\004" +
    "\037\005\042\012\022\013\035\024\036\040\044\001\002" +
    "\000\020\003\uffbf\004\uffbf\005\uffbf\012\uffbf\013\uffbf\024" +
    "\uffbf\040\uffbf\001\002\000\020\003\043\004\037\005\042" +
    "\012\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\020\003\043\004\037\005\042\012\022\013" +
    "\035\024\036\040\044\001\002\000\020\003\043\004\037" +
    "\005\042\012\022\013\035\024\036\040\044\001\002\000" +
    "\042\003\uffce\014\uffce\017\uffce\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\042\003\uffd0" +
    "\014\uffd0\017\uffd0\023\055\024\046\025\054\026\057\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\001\002\000\042\003\uffd3\014\uffd3\017" +
    "\uffd3\023\055\024\046\025\054\026\057\027\063\030\061" +
    "\031\051\032\052\033\060\034\050\035\056\036\047\037" +
    "\uffd3\001\002\000\042\003\uffcf\014\uffcf\017\uffcf\023\055" +
    "\024\046\025\054\026\057\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002" +
    "\000\042\003\uffc9\014\uffc9\017\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002\000\020\003" +
    "\043\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\042\003\uffd1\014\uffd1\017\uffd1\023\055\024" +
    "\046\025\054\026\057\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\001\002\000" +
    "\042\003\uffcc\014\uffcc\017\uffcc\023\uffcc\024\uffcc\025\054" +
    "\026\057\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\001\002\000\042\003\uffca" +
    "\014\uffca\017\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\001\002\000\042\003\uffcd\014\uffcd\017" +
    "\uffcd\023\055\024\046\025\054\026\057\027\063\030\061" +
    "\031\051\032\052\033\060\034\050\035\056\036\047\037" +
    "\062\001\002\000\042\003\uffd4\014\uffd4\017\uffd4\023\055" +
    "\024\046\025\054\026\057\027\063\030\061\031\051\032" +
    "\052\033\060\034\050\035\056\036\uffd4\037\uffd4\001\002" +
    "\000\042\003\uffcb\014\uffcb\017\uffcb\023\uffcb\024\uffcb\025" +
    "\054\026\057\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\001\002\000\024\002" +
    "\uffe5\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\015\uffe5\016\uffe5\001\002\000\042\003\uffc3\014\uffc3\017" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\001\002\000\042\003\uffc4\014\uffc4\017\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\001\002" +
    "\000\036\014\107\023\055\024\046\025\054\026\057\027" +
    "\063\030\061\031\051\032\052\033\060\034\050\035\056" +
    "\036\047\037\062\001\002\000\006\014\106\022\034\001" +
    "\002\000\042\003\uffc2\014\uffc2\017\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\001\002\000\042" +
    "\003\uffc8\014\uffc8\017\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\001\002\000\006\017\113\022" +
    "\034\001\002\000\004\017\112\001\002\000\024\002\uffe4" +
    "\003\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\015" +
    "\uffe4\016\uffe4\001\002\000\024\002\uffe3\003\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3\001" +
    "\002\000\010\017\ufff5\020\ufff5\021\ufff5\001\002\000\006" +
    "\017\122\020\121\001\002\000\004\017\120\001\002\000" +
    "\006\017\ufff9\020\ufff9\001\002\000\022\003\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\012\ufffc\015\ufffc\041\ufffc\042\ufffc\001" +
    "\002\000\004\012\ufff7\001\002\000\022\003\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\015\ufffd\041\ufffd\042\ufffd\001" +
    "\002\000\004\012\114\001\002\000\006\017\ufff8\020\ufff8" +
    "\001\002\000\010\017\ufff6\020\ufff6\021\126\001\002\000" +
    "\004\004\127\001\002\000\004\022\130\001\002\000\010" +
    "\017\ufff4\020\ufff4\021\ufff4\001\002\000\022\002\ufff1\003" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\015\ufff1\016\ufff1" +
    "\001\002\000\006\004\134\012\133\001\002\000\004\022" +
    "\136\001\002\000\004\022\135\001\002\000\042\003\uffbc" +
    "\014\uffbc\017\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\001\002\000\042\003\uffbb\014\uffbb\017" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\001\002\000\026\003\031\006\026\007\020\010\011" +
    "\012\022\015\021\016\144\017\033\022\034\035\032\001" +
    "\002\000\020\003\142\006\026\007\020\010\011\012\022" +
    "\015\021\016\141\001\002\000\024\002\uffec\003\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec" +
    "\001\002\000\012\016\143\017\033\022\034\035\032\001" +
    "\002\000\024\002\uffeb\003\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\015\uffeb\016\uffeb\001\002\000\024\002" +
    "\uffea\003\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea" +
    "\015\uffea\016\uffea\001\002\000\016\003\031\006\026\007" +
    "\020\010\011\012\022\015\021\001\002\000\020\003\043" +
    "\004\037\005\042\012\022\013\035\024\036\040\044\001" +
    "\002\000\020\003\151\004\037\005\042\012\022\013\035" +
    "\024\036\040\044\001\002\000\040\003\154\014\153\023" +
    "\055\024\046\025\054\026\057\027\063\030\061\031\051" +
    "\032\052\033\060\034\050\035\056\036\047\037\062\001" +
    "\002\000\006\014\152\022\034\001\002\000\016\003\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\015\uffdd\001\002\000" +
    "\016\003\uffde\006\uffde\007\uffde\010\uffde\012\uffde\015\uffde" +
    "\001\002\000\016\003\uffdb\006\uffdb\007\uffdb\010\uffdb\012" +
    "\uffdb\015\uffdb\001\002\000\036\014\156\023\055\024\046" +
    "\025\054\026\057\027\063\030\061\031\051\032\052\033" +
    "\060\034\050\035\056\036\047\037\062\001\002\000\016" +
    "\003\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\015\uffdc\001" +
    "\002\000\024\002\uffe1\003\160\006\uffe1\007\uffe1\010\uffe1" +
    "\011\161\012\uffe1\015\uffe1\016\uffe1\001\002\000\016\003" +
    "\031\006\026\007\020\010\011\012\022\015\021\001\002" +
    "\000\016\003\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\015" +
    "\uffdf\001\002\000\016\003\031\006\026\007\020\010\011" +
    "\012\022\015\021\001\002\000\024\002\uffe2\003\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2\016\uffe2" +
    "\001\002\000\024\002\uffe0\003\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\001\002\000\020" +
    "\003\170\004\037\005\042\012\022\013\035\024\036\040" +
    "\044\001\002\000\024\002\uffe8\003\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\001\002\000" +
    "\036\017\172\023\055\024\046\025\054\026\057\027\063" +
    "\030\061\031\051\032\052\033\060\034\050\035\056\036" +
    "\047\037\062\001\002\000\006\017\171\022\034\001\002" +
    "\000\024\002\uffe6\003\uffe6\006\uffe6\007\uffe6\010\uffe6\011" +
    "\uffe6\012\uffe6\015\uffe6\016\uffe6\001\002\000\024\002\uffe7" +
    "\003\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015" +
    "\uffe7\016\uffe7\001\002\000\020\003\043\004\037\005\042" +
    "\012\022\013\035\024\036\040\044\001\002\000\020\003" +
    "\201\004\037\005\042\012\022\013\035\024\036\040\044" +
    "\001\002\000\016\003\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\015\uffd9\001\002\000\016\003\031\006\026\007\020" +
    "\010\011\012\022\015\021\001\002\000\024\002\uffda\003" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\015\uffda" +
    "\016\uffda\001\002\000\040\003\204\014\203\023\055\024" +
    "\046\025\054\026\057\027\063\030\061\031\051\032\052" +
    "\033\060\034\050\035\056\036\047\037\062\001\002\000" +
    "\006\014\202\022\034\001\002\000\016\003\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\012\uffd7\015\uffd7\001\002\000\016\003" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\015\uffd8\001\002" +
    "\000\016\003\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\015" +
    "\uffd5\001\002\000\036\014\206\023\055\024\046\025\054" +
    "\026\057\027\063\030\061\031\051\032\052\033\060\034" +
    "\050\035\056\036\047\037\062\001\002\000\016\003\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\015\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\004\016\003\001\001\000\024\003" +
    "\026\004\014\005\006\006\016\007\012\010\007\017\024" +
    "\022\023\027\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\144\001\001\000\020\003\137\004\014\005" +
    "\006\006\016\007\012\010\007\027\011\001\001\000\002" +
    "\001\001\000\016\004\130\005\006\006\016\007\012\010" +
    "\007\027\011\001\001\000\006\020\114\021\116\001\001" +
    "\000\002\001\001\000\004\027\110\001\001\000\016\004" +
    "\027\005\006\006\016\007\012\010\007\027\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\040\027" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\103\027\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\063\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\044\027" +
    "\037\001\001\000\006\012\063\013\052\001\001\000\006" +
    "\011\077\027\037\001\001\000\006\011\076\027\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\075\027\037\001\001\000\006\011\074\027" +
    "\037\001\001\000\006\011\073\027\037\001\001\000\002" +
    "\001\001\000\006\011\070\027\037\001\001\000\002\001" +
    "\001\000\006\011\067\027\037\001\001\000\006\011\066" +
    "\027\037\001\001\000\006\011\065\027\037\001\001\000" +
    "\006\011\064\027\037\001\001\000\006\012\063\013\052" +
    "\001\001\000\006\012\063\013\052\001\001\000\006\012" +
    "\063\013\052\001\001\000\006\012\063\013\052\001\001" +
    "\000\006\012\063\013\052\001\001\000\006\011\072\027" +
    "\037\001\001\000\006\012\063\013\052\001\001\000\006" +
    "\012\063\013\052\001\001\000\006\012\063\013\052\001" +
    "\001\000\006\012\063\013\052\001\001\000\006\012\063" +
    "\013\052\001\001\000\006\012\063\013\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\063\013\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\122\001\001\000\002\001" +
    "\001\000\004\021\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\130\005\006\006\016\007\012\010\007\027\011" +
    "\001\001\000\016\004\027\005\006\006\016\007\012\010" +
    "\007\027\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\156\005" +
    "\006\006\016\007\012\010\007\027\011\001\001\000\006" +
    "\011\154\027\037\001\001\000\006\011\147\027\037\001" +
    "\001\000\006\012\063\013\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\063\013\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\163\005\006\006\016\007\012\010" +
    "\007\027\011\001\001\000\004\015\161\001\001\000\016" +
    "\004\162\005\006\006\016\007\012\010\007\027\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\166" +
    "\027\037\001\001\000\002\001\001\000\006\012\063\013" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\204\027\037\001\001\000\006\011" +
    "\177\027\037\001\001\000\004\014\175\001\001\000\016" +
    "\004\176\005\006\006\016\007\012\010\007\027\011\001" +
    "\001\000\002\001\001\000\006\012\063\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\063\013\052\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTableArray = new HashMap<String,Integer>();
    symbolTableFloat = new HashMap<String, Double>();
    symbolTableType = new HashMap<String, String>();

    }



    public HashMap <String,Integer>symbolTableArray;
    public HashMap <String,Double>symbolTableFloat;
    public HashMap <String,String>symbolTableType;
    public boolean isCorrect = true;
    public Integer typeErrors = 0;
    public Integer labelCount = 1;
    // Redefinition of error functions
    /* The report_error function, in this program, is called only when
       an error, not managed by the error symbol, is found.
       Indeed, when errors are recognized by the error symbol, the function
       syntax_error (disabled in this program) is called.
       This program is an example of error function redefinition: two new
       functions are developed, pSynError and pSynWarning, used to print
       syntactical errors and warning, respectively. */
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

        // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

    public Object stack ( int position){
        // returns the object at the specified position
        // from the top (tos) of the stack
        return(((Symbol)stack.
        elementAt(tos+position)).value);
    }


    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    class myExpr{
        public String toPrint;
        public Double result;
        public String type;
        myExpr(String toPrint, Double result,String type){
            this.toPrint = new String(toPrint);
            this.result = new Double(result);
            this.type = new String(type);
        }
    }
    private void pSynError(String message){
        System.err.println("ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
        parser.typeErrors++;
    }
    private void pSynWarning(String message){
        System.err.println("WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.isCorrect = false;
    }
        

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_list stmt_list 
            {
              Object RESULT =null;
		
    
    if (parser.isCorrect){

        System.out.println("Program correctly recognized");
    }    
    else{
        if(parser.typeErrors != 0)
            System.out.println("Total errors: " + parser.typeErrors);
        else{
            System.out.println("END");
        }
        System.out.println("Program not correct");       
    }  

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= type var_list S 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= type error S 
            {
              Object RESULT =null;
		 pSynWarning("Error in declaration"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT_TYPE 
            {
              String RESULT =null;
		RESULT = "INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= DOUBLE_TYPE 
            {
              String RESULT =null;
		RESULT = "DOUBLE";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (String) parser.stack(-1);
        parser.symbolTableType.put((String) x, (String) parser.stack(-1));
        System.out.println((String) parser.stack(-1) + " " + x);            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_list ::= var_list CM Empty var 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        parser.symbolTableType.put((String) y, (String) parser.stack(-1));
        System.out.println((String) parser.stack(-1) + " " + y);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Empty ::= 
            {
              String RESULT =null;
		 RESULT = (String) parser.stack(-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Empty",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var ::= ID array 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (String) (name + "" + pos);
    parser.symbolTableType.put((String) name, (String) parser.stack(-2));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array ::= 
            {
              String RESULT =null;
		RESULT = new String("");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array ::= array SO INT SC 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new String("["+val+"]");
        
        parser.symbolTableArray.put((String) parser.stack(-4), val);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_list ::= error stmt 
            {
              Object RESULT =null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= print 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= BO stmt_list BC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= BO stmt_list error BC 
            {
              Object RESULT =null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= BO error BC 
            {
              Object RESULT =null;
		 pSynWarning("Missing ; before }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= error S 
            {
              Object RESULT =null;
		 pSynWarning("Error in statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= id S 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[] pos = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(parser.typeErrors == 0)
            System.out.println("ASS " + pos[0]);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment ::= id EQ exp S 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String[] pos = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myExpr res = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(!pos[1].equals("") && !res.type.equals("")){
            if(pos[1].equals(res.type)){
                parser.symbolTableFloat.put(pos[0], (Double) res.result);
                if(parser.typeErrors == 0){
                    System.out.println("EVAL " + res.toPrint);
                    System.out.println("ASS " + pos[0]); 
                } 
            }else{
            pSynWarning("Assignment of a " + res.type + " value to a " + pos[1] + " variable");            
            }            
        }

 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assignment ::= id EQ error S 
            {
              Object RESULT =null;
		 pSynWarning("Error in expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment ::= error EQ exp S 
            {
              Object RESULT =null;
		 pSynWarning("Error in assigment"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT id S 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String[] x = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(parser.typeErrors == 0)
                System.out.println("PRINT " + x[0]);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // print ::= PRINT error S 
            {
              Object RESULT =null;
		 pSynWarning("Error in 'print' instruction"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF if_condition stmt ELSE NT1 stmt 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
        if(parser.typeErrors == 0){
            Integer[] I = x;
            System.out.print("L" + I[1] + ":");
        }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF if_condition stmt 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(parser.typeErrors == 0){
            Integer[] I = x;
            System.out.print("L" + I[0] + ":");
        }  
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if ::= IF if_condition stmt error stmt 
            {
              Object RESULT =null;
		 pSynWarning("Error 'else' expected in 'if' instruction"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT1 ::= 
            {
              Integer[] RESULT =null;
		
    if(parser.typeErrors == 0){
        if(parser.typeErrors == 0){        
            Integer[] I = ((Integer[]) parser.stack(-2));
            System.out.println("GOTO L" + I[1]);
            System.out.print("L" + I[0] + ":");
        }        
    }
 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_condition ::= RO exp RC 
            {
              Integer[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Integer[2];
        RESULT[0] = parser.labelCount++;
        RESULT[1] = parser.labelCount++;        
        if(parser.typeErrors == 0){
            System.out.println("EVAL " + a.toPrint);
            System.out.println("GOTOF L" + RESULT[0]);            
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_condition ::= RO error RC 
            {
              Integer[] RESULT =null;
		 pSynWarning("Error in 'if' condition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_condition ::= error exp RC 
            {
              Integer[] RESULT =null;
		 pSynWarning("Error '(' expected in 'if' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_condition ::= RO exp error 
            {
              Integer[] RESULT =null;
		 pSynWarning("Error ')' expected in 'if' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_condition",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while ::= WHILE while_condition NT0 stmt 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] x = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
    if(parser.typeErrors == 0){
        Integer[] I = x;
        System.out.println("GOTO L" + I[0]);
        System.out.print("L" + I[1] + ":");        
    }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT0 ::= 
            {
              Integer[] RESULT =null;
		
    RESULT = new Integer[2];
    RESULT[0] = parser.labelCount++;
    RESULT[1] = parser.labelCount++;
    if(parser.typeErrors == 0){
        System.out.print("L" + RESULT[0] + ":");
        System.out.println("EVAL " + (String) (parser.stack(0)));
        System.out.println("GOTOF L" + RESULT[1]);        
    }


              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT0",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while_condition ::= RO exp RC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new String(a.toPrint);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while_condition ::= RO error RC 
            {
              String RESULT =null;
		 pSynWarning("Error in 'while' condition"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // while_condition ::= error exp RC 
            {
              String RESULT =null;
		 pSynWarning("Error '(' expected in 'while' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // while_condition ::= RO exp error 
            {
              String RESULT =null;
		 pSynWarning("Error ')' expected in 'while' instruciton"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_condition",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp AND exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " &",-1.0, "");    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp OR exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " >",-1.0, "");    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= NOT exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " !",-1.0, "");    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp EQ EQ exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " ==",-1.0, "");     
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp MIN exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " <",-1.0, "");     
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MAJ exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " >",-1.0, "");     
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp mineq exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " <=",-1.0, "");     
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp majeq exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " >=",-1.0, "");     
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp PLUS exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!a.type.equals(b.type)){
            pSynWarning("Operation between int and double, int number casted to double");
            a.type = new String ("");
        }
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " +",new Double(a.result+b.result), a.type);   
            
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp MINUS exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!a.type.equals(b.type)){
            pSynWarning("Operation between int and double, int number casted to double");
            a.type = new String("");            
        }  
        
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " -",new Double(a.result-b.result), a.type);
           
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp STAR exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!a.type.equals(b.type)){
            pSynWarning("Operation between int and double, int number casted to double");
            a.type = new String("");
        }  
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " *",new Double(a.result*b.result), a.type);       
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp DIV exp 
            {
              myExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		myExpr a = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		myExpr b = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(!a.type.equals(b.type)){
            pSynWarning("Operation between int and double, int number casted to double");
            a.type = new String("");
        }else{
            if(a.type.equals("INT")){
                if(a.result % b.result != 0){
                    a.type = new String("DOUBLE");
                }  
            } 
        } 
        RESULT = new myExpr(a.toPrint + " " + b.toPrint + " /",new Double(a.result/b.result), a.type);  
           
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= RO exp RC 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		myExpr val = (myExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new myExpr(val.toPrint,val.result,val.type);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= id 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] val = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(val[1].equals("")){
            RESULT = new myExpr(val[0],-1.0, val[1]);
        }else
           RESULT = new myExpr(val[0],parser.symbolTableFloat.get(val[0]), val[1]); 
        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= INT 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(val.toString(),(Double) val.doubleValue(), "INT");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= DOUBLE 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new myExpr(val.toString(),val, "DOUBLE");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= MINUS INT 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        val = -val;
        RESULT = new myExpr(val.toString(),(Double) (val).doubleValue(), "INT");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= MINUS DOUBLE 
            {
              myExpr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        val = -val;
        RESULT = new myExpr( val.toString(),  val, "DOUBLE");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= RO error RC 
            {
              myExpr RESULT =null;
		 pSynWarning("Error in expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mineq ::= MIN_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mineq ::= EQ_MIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mineq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // majeq ::= MAJ_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("majeq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // majeq ::= EQ_MAJ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("majeq",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id ::= ID 
            {
              String[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String type = parser.symbolTableType.get(x);
        if(type == null){
            pSynError("Variable " + x + " not declared");
            type = new String("");
        }
        RESULT = new String[2];
        RESULT[0] = new String(x); 
        RESULT[1] = new String(type); 

            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // id ::= ID SO INT SC 
            {
              String[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer pos = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String type = parser.symbolTableType.get(x);
        RESULT = new String[2];
        RESULT[0] = x + "[" + pos + "]";
        
        if(type == null){
            pSynError("Variable " + x + " not declared");
            type = new String("");
        } else{
            Integer size = parser.symbolTableArray.get(x);
            if( size <= pos){
                pSynError("Array index " + pos + " exceed array size " + size); 
            }
        }
        RESULT[1] = new String(type);
            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // id ::= ID SO ID SC 
            {
              String[] RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String type = parser.symbolTableType.get(x);
        String typePos = parser.symbolTableType.get(pos);
        RESULT = new String[2];
        RESULT[0] = x + "[" + pos + "]";
        
        if(type == null){
            pSynError("Variable " + x + " not declared");
            type = new String("");
        }
        RESULT[1] = new String(type);    
        if(typePos == null){
            pSynError("Variable " + pos + " not declared");
        }else{
            if(typePos == "INT"){
                Integer size = parser.symbolTableArray.get(x);
                Double posValue = parser.symbolTableFloat.get(pos);
                if( posValue != null){
                    if(size > posValue){
                        Double newValue = parser.symbolTableFloat.get((String) (x + "[" + (Integer) parser.symbolTableFloat.get(pos).intValue() + "]"));
                        parser.symbolTableFloat.put(RESULT[0], newValue );                        
                    }else{
                        pSynError("Array index " + posValue + " exceed array size " + size); 
                    }
                }else{
                    pSynWarning("Variable " + pos + " not initialized");  
                }
                    
            }else{
                pSynWarning("Can't have as position a double value");                 
            }
             
        }

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // id ::= error SC 
            {
              String[] RESULT =null;
		 pSynWarning("Error in vector"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

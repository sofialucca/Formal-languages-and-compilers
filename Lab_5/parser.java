
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.lang.Math;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\006\000\002\011\005\000\002\012\004" +
    "\000\002\007\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\010\005" +
    "\000\002\004\004\000\002\006\003\000\002\006\003\000" +
    "\002\005\002\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\020\004\uffeb\007\uffeb\011\uffeb\014\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\001\002\000\004\002\060\001\002" +
    "\000\020\004\010\007\021\011\020\014\006\023\007\024" +
    "\011\025\012\001\002\000\016\004\010\007\021\014\006" +
    "\023\007\024\032\025\033\001\002\000\026\005\ufffa\006" +
    "\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\001\002\000\016\004\010\007\021\014" +
    "\006\023\007\024\032\025\033\001\002\000\022\010\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\052\020\ufff8\021" +
    "\ufff8\001\002\000\022\010\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\047\020\ufff7\021\ufff7\001\002\000\016\004" +
    "\010\007\021\014\006\023\007\024\032\025\033\001\002" +
    "\000\020\004\uffec\007\uffec\011\uffec\014\uffec\023\uffec\024" +
    "\uffec\025\uffec\001\002\000\026\005\ufff9\006\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\001\002\000\020\004\uffea\007\uffea\011\uffea\014\uffea" +
    "\023\uffea\024\uffea\025\uffea\001\002\000\020\004\uffed\007" +
    "\uffed\011\uffed\014\uffed\023\uffed\024\uffed\025\uffed\001\002" +
    "\000\004\002\000\001\002\000\016\004\010\007\021\014" +
    "\006\023\007\024\032\025\033\001\002\000\020\010\024" +
    "\013\025\014\027\015\026\016\030\020\023\021\031\001" +
    "\002\000\016\004\010\007\021\014\006\023\007\024\032" +
    "\025\033\001\002\000\020\004\uffee\007\uffee\011\uffee\014" +
    "\uffee\023\uffee\024\uffee\025\uffee\001\002\000\016\004\010" +
    "\007\021\014\006\023\007\024\032\025\033\001\002\000" +
    "\016\004\010\007\021\014\006\023\007\024\032\025\033" +
    "\001\002\000\016\004\010\007\021\014\006\023\007\024" +
    "\032\025\033\001\002\000\016\004\010\007\021\014\006" +
    "\023\007\024\032\025\033\001\002\000\016\004\010\007" +
    "\021\014\006\023\007\024\032\025\033\001\002\000\026" +
    "\005\ufff8\006\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\020\ufff8\021\ufff8\001\002\000\026\005\ufff7" +
    "\006\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\020\ufff7\021\ufff7\001\002\000\026\005\ufff1\006\ufff1" +
    "\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\020" +
    "\023\021\ufff1\001\002\000\026\005\ufff2\006\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\020\023\021" +
    "\031\001\002\000\026\005\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\026\016\030\020\023\021\031\001" +
    "\002\000\026\005\ufff3\006\ufff3\010\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\020\023\021\031\001\002\000" +
    "\026\005\ufff5\006\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\026\016\030\020\023\021\031\001\002\000\026\005" +
    "\ufff6\006\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\020\023\021\ufff6\001\002\000\020\012\043\013" +
    "\025\014\027\015\026\016\030\020\023\021\031\001\002" +
    "\000\016\004\ufffd\007\ufffd\014\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\001\002\000\020\006\046\013\025\014\027\015\026" +
    "\016\030\020\023\021\031\001\002\000\026\005\ufffb\006" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\020\ufffb\021\ufffb\001\002\000\026\005\ufffc\006\ufffc\010" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc" +
    "\021\ufffc\001\002\000\016\004\010\007\021\014\006\023" +
    "\007\024\032\025\033\001\002\000\020\010\051\013\025" +
    "\014\027\015\026\016\030\020\023\021\031\001\002\000" +
    "\020\004\ufffe\007\ufffe\011\ufffe\014\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\001\002\000\016\004\010\007\021\014\006\023" +
    "\007\024\032\025\033\001\002\000\020\010\054\013\025" +
    "\014\027\015\026\016\030\020\023\021\031\001\002\000" +
    "\020\004\uffff\007\uffff\011\uffff\014\uffff\023\uffff\024\uffff" +
    "\025\uffff\001\002\000\020\005\056\013\025\014\027\015" +
    "\026\016\030\020\023\021\031\001\002\000\026\005\uffef" +
    "\006\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\020\uffef\021\uffef\001\002\000\026\005\ufff0\006\ufff0" +
    "\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\016\003\013\004\016\006\015\007\014\010\021" +
    "\011\012\001\001\000\010\007\014\010\056\011\012\001" +
    "\001\000\002\001\001\000\010\007\014\010\054\011\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\014\010\043\011\012\012\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\014\010\041\011\012\001\001" +
    "\000\002\001\001\000\010\007\014\010\040\011\012\001" +
    "\001\000\002\001\001\000\010\007\014\010\037\011\012" +
    "\001\001\000\010\007\014\010\036\011\012\001\001\000" +
    "\010\007\014\010\035\011\012\001\001\000\010\007\014" +
    "\010\034\011\012\001\001\000\010\007\014\010\033\011" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\014\010\047\011\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\014\010" +
    "\052\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolScalarTable = new HashMap<String, Float>();
    symbolVectorTable = new HashMap<String,Float[]>();

    }


    public HashMap <String,Float>symbolScalarTable;
    public HashMap <String,Float[]>symbolVectorTable;
    /* To run the program type: java parser test.txt */
    /*public static void main(String argv[]){
	    try {
        /* Scanner instantiation */
        //scanner l = new scanner(new FileReader(argv[0]));
        /* Parser instantiation */
        //parser p = new parser(l);
        /* Run the parser */
   /*     Object result = p.parse().value;      
      } catch (Exception e){
              e.printStackTrace();
      }
    }*/
    public int errors =0;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else System.err.print(": "+message);
        else System.err.print(": "+message);
    }

    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    /* It returns the object of type Symbol in the top of the parser stack.
    */
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    private void pSynError(String message){
        System.err.println("Syntax error: line: " + parser.getLine() + " column: " + parser.getColumn()+ "\n Error type: " + message);
        parser.errors = 1;
        parser.done_parsing();
    }

    private void pSynWarning(String message){
        System.err.println("Syntax error: line: " + parser.getLine() + " column: " + parser.getColumn() + "\n Error type: " + message);
        parser.errors = 1;        
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= elementsList QM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assignment ::= SCALARID EQ expr S 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] value = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(value.length == 1){
        parser.symbolScalarTable.put(id,value[0]);
        System.out.println("assignment: " + value[0] );        
    }else
        pSynWarning("ERROR no vectors for a scalar assignment"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assignment ::= VECTORID EQ expr S 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] value = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(value.length == 2){
        parser.symbolVectorTable.put(id,value);
        System.out.println("assignment: [" + value[0] + "," + value[1] + "]" );        
    }else
        pSynWarning("ERROR no scalrs for a vector assignment");         

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elementFirst ::= SO expr C 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if(a.length == 1){
            RESULT = new Float[1];
            RESULT[0]=new Float(a[0]);
        }else{
            pSynWarning("ERROR no vectors allowed for element vectors"); 
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementFirst",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elementSecond ::= expr SC 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
        if(a.length == 1 ){
            RESULT = new Float[1];
            RESULT[0]=new Float(a[0]);
        }else{
            pSynWarning("ERROR no vectors allowed for element vectors"); 
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementSecond",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vector ::= elementFirst elementSecond 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float[2];
    RESULT[0] = a[0];
    RESULT[1] = b[0];
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= NUM 
            {
              Float[] RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Float[1];
    RESULT[0]=val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= vector 
            {
              Float[] RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] val = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Float[2];
        RESULT = val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= SCALARID 
            {
              Float[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Float[1];
    RESULT[0]= parser.symbolScalarTable.get(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= VECTORID 
            {
              Float[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Float[2];
    RESULT = parser.symbolVectorTable.get(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr POW expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == 1 && a.length == b.length){
            RESULT = new Float[1];
            RESULT[0] = new Float(Math.pow(a[0],b[0]));

        }else
            pSynWarning("ERROR power allowed only if scalar");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr PLUS expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == b.length){
            RESULT =  new Float[b.length];
            if(a.length == 2){
                RESULT[1] = a[1] + b[1];
            }
            RESULT[0] = a[0] + b[0];
        }else
            pSynWarning("ERROR sum allowed only if of same type");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr MINUS expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == b.length){
            RESULT =  new Float[b.length];
            if(a.length == 2){
                RESULT[1] = a[1] - b[1];
            }
            RESULT[0] = a[0] - b[0];
        }else
            pSynWarning("ERROR difference allowed only if of same type");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MUL expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == 1){
            if(a.length != b.length){
                RESULT = new Float[2];
                RESULT[1] = a[0]*b[1];
            }else{
                RESULT = new Float[1];
                
            }
            RESULT[0]= a[0] * b[0];
        }else
            pSynWarning("ERROR multiplication allowed only if both scalars or first scalar and then vector");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr DIV expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == 1){
            if(a.length != b.length){
                //Float[] valExpr =  ;
                RESULT = new Float[2];
                RESULT[1] = a[0]/b[1];
            }else{
                RESULT = new Float[1];
                
            }
            RESULT[0]= a[0] / b[0];
        }else
            pSynWarning("ERROR division allowed only if both scalars or first scalar and then vector");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr SCALARPROD expr 
            {
              Float[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] b = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.length == b.length && a.length == 2){
            RESULT = new Float[1];
            RESULT[0] = (a[0] *b[0]) + (a[1] *b[1]);
        }else
            pSynWarning("ERROR scalar product only between two vectors " );
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= MINUS expr 
            {
              Float[] RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float[] val = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(val.length == 2){
            
            RESULT = new Float[2];
            RESULT[1] = -val[1];
        }else
            RESULT = new Float[1];
        RESULT[0]= -val[0];
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= RO expr RC 
            {
              Float[] RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] val = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = val;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expressionPrint ::= expr S 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float[] a = (Float[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if(a.length == 1)
        System.out.println("scalar expression: " + a[0]);
    else
       System.out.println("vector expression: [" + a[0] + "," + a[1] + "]");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionPrint",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inputLines ::= expressionPrint 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inputLines",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inputLines ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inputLines",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elementsList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementsList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elementsList ::= elementsList inputLines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementsList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
